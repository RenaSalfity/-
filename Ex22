
/*
רינה סלפיתי 209143098
קאסם חליליה 207674227
 */
import java.util.Stack;

public class Ex22 {
	public static boolean checkDigitsInStack(int number, Stack<Integer> origStack) {
		// temp stack to save original stack
		Stack<Integer> tempStack = new Stack<>();

		// get digits from the number and check against the stack
		while (number > 0) {
			int digit = number % 10; // last digit of the number
			number /= 10; // Remove the last digit from the number

			boolean found = false;

			// Check if the digit exists in the stack
			while (!origStack.isEmpty()) {
				int top = origStack.pop();
				tempStack.push(top);
				if (top == digit) {
					found = true;
				}
			}

			// Restore the stack for the next digit
			while (!tempStack.isEmpty()) {
				origStack.push(tempStack.pop());
			}

			if (!found) {
				return false; // If a digit is not found, return false
			}
		}

		return true; // All digits are found
	}

	public static void main(String[] args) {
		Stack<Integer> stack = new Stack<>();
		stack.push(3);
		stack.push(3);
		stack.push(2);
		stack.push(1);
		stack.push(5);

		int num1 = 215;
		int num2 = 321;
		int num3 = 324;

		System.out.println("Original Stack: " + stack);
		System.out.println("does " + num1 + " appears in stack?: " + checkDigitsInStack(num1, stack));
		System.out.println("does " + num2 + " appears in stack?: " + checkDigitsInStack(num2, stack));
		System.out.println("does " + num3 + " appears in stack?: " + checkDigitsInStack(num3, stack));
		System.out.println("Stack After Check: " + stack);
	}
}
//assuming that in stack there are n numbers, and in number there is d digits
//the number of iterates is d*n then its O(d*n)
