import java.util.Stack;
/*
רינה סלפיתי 209143098
קאסם חליליה 207674227
 */
public class Ex17 {

	public static void main(String[] args) {
		 Stack<String> st1 = new Stack<>();
	        Stack<String> st2 = new Stack<>();

	        st1.push("A");
	        st1.push("B");
	        st1.push("C");

	        st2.push("A");
	        st2.push("B");
	        st2.push("C");
	        System.out.println("Stack 1:  " + st1);
	        System.out.println("Stack 2:  " + st2);
	        System.out.println("Are stacks equal? " + areStacksEqual(st1, st2)); // true

	        //st2.pop();
	        st2.push("D");
	        System.out.println("Stack 1:  " + st1);
	        System.out.println("Stack 2:  " + st2);
	        System.out.println("Are stacks equal? " + areStacksEqual(st1, st2)); 
	  
	}
	public static boolean areStacksEqual(Stack<String> st1, Stack<String> st2) {
		//temp stack to save the elements
		Stack<String> tempSt1=new Stack<>();
		Stack<String> tempSt2=new Stack<>();
		boolean areEqual = true;
		
        // Compare elements from both stacks
		 while (!st1.isEmpty() && !st2.isEmpty()) {
	            String elem1 = st1.pop();
	            String elem2 = st2.pop();

	            // Push elements to temp stacks
	            tempSt1.push(elem1);
	            tempSt2.push(elem2);

	            // If any element is not equal, mark stacks as not equal
	            if (!elem1.equals(elem2)) {
	                areEqual = false;
	            }
	        }

	        // after cheking all the elements, check if one stack is empty but the other is not
		 	//they are not equal
	        if (!st1.isEmpty() || !st2.isEmpty()) {
	            areEqual = false;
	        }

	        // Restore original stacks
	        while (!tempSt1.isEmpty()) {
	            st1.push(tempSt1.pop());
	        }
	        while (!tempSt2.isEmpty()) {
	            st2.push(tempSt2.pop());
	        }

	        return areEqual;
	}

}
//O(n), the number of iterations equals the number of elements in the stacks.

