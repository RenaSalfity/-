import unit4.collectionsLib.Queue;
/*
 *קאסם חליליה 207674227
 *רינה סלפיתי 209143098
*/
public class Ex26 {

    public static Queue<String> mergeSortedQueues(Queue<String> q1, Queue<String> q2) {
        Queue<String> mergedQueue = new Queue<>(); // New queue to  merge

        // Merge the two queues while they have elements
        while (!q1.isEmpty() && !q2.isEmpty()) {
            // Compare the heads of both queues
            String head1 = q1.head();
            String head2 = q2.head();

            if (head1.compareTo(head2) <= 0) {
                mergedQueue.insert(q1.remove()); // Add the smaller element to the merged queue
            } else {
                mergedQueue.insert(q2.remove());
            }
        }

        // Add remaining elements from q1, if any
        while (!q1.isEmpty()) {
            mergedQueue.insert(q1.remove());
        }

        // Add remaining elements from q2, if any
        while (!q2.isEmpty()) {
            mergedQueue.insert(q2.remove());
        }

        return mergedQueue;
    }

    public static void main(String[] args) {
        Queue<String> q1 = new Queue<>();
        Queue<String> q2 = new Queue<>();

        // Populate the first sorted queue
        q1.insert("Alice");
        q1.insert("Charlie");
        q1.insert("David");

        // Populate the second sorted queue
        q2.insert("Bob");
        q2.insert("Eve");
        q2.insert("Frank");

        System.out.println("Queue 1: " + q1);
        System.out.println("Queue 2: " + q2);

        Queue<String> mergedQueue = mergeSortedQueues(q1, q2);

        System.out.println("Merged Queue: " + mergedQueue);
    }
}
//the number of iterates is m + n, m is the number of elements in q1, n is the number of elements in q2
//the compare is O(1)
//the complexity is O(n+m)
