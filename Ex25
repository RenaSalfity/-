import unit4.collectionsLib.Queue;
/*
 *קאסם חליליה 207674227
 *רינה סלפיתי 209143098
*/
public class Ex25 {

    public static Queue<String> sortQueue(Queue<String> q) {
        Queue<String> sortedQueue = new Queue<>(); // Queue to hold sorted elements
        Queue<String> t = new Queue<>(); // Temporary queue for sorting

        // Determine the size of the queue
        int size = 0;
        while (!q.isEmpty()) {
            t.insert(q.remove());
            size++;
        }

        // Restore elements to the original queue
        while (!t.isEmpty()) {
            q.insert(t.remove());
        }

        // Perform sorting
        for (int i = 0; i < size; i++) {
            String smallest = q.remove(); // Assume the first element is the smallest

            // Find the smallest element
            for (int j = 1; j < size - i; j++) {
                String current = q.remove();
                if (current.compareTo(smallest) < 0) {
                    t.insert(smallest); // Move the previous smallest to `t`
                    smallest = current; // Update smallest
                } else {
                    t.insert(current); // Move current to `t`
                }
            }

            // Place the smallest element in the sorted queue
            sortedQueue.insert(smallest);

            // Restore remaining elements to the original queue
            while (!t.isEmpty()) {
                q.insert(t.remove());
            }
        }

        // Move sorted elements back to the original queue
        while (!sortedQueue.isEmpty()) {
            q.insert(sortedQueue.remove());
        }

        return q;
    }

    public static void main(String[] args) {
        Queue<String> q = new Queue<>();

        // Insert elements into the queue
        q.insert("banana");
        q.insert("apple");
        q.insert("date");
        q.insert("cate");
        q.insert("appl");

        System.out.println("Queue before sorting: " + q);

        sortQueue(q);

        System.out.println("Queue after sorting: " + q);
    }
}
/*complexity: the first loop calculates the size of the queue
 * then the number of iterates its n 
 * sorting: outer loop runs n, inner runs n-i 
 * O(n)+O(n-1)+O(n−2)+⋯+O(1)== O(n(n+1)/2)==O(n^2)
 */


