import unit4.collectionsLib.Node;
/*
 *קאסם חליליה 207674227
 *רינה סלפיתי 209143098
*/
public class Ex31 {
	public static void  printList(Node <Integer>h){
		Node<Integer>  temp = null;
		for(temp=h; temp!=null; temp=temp.getNext())
			System.out.print(temp.getValue()+" ");
		
		System.out.println();
		
	}
	
	//this function gets a node of integers, and another integer number
	//out: it counts the number of times that num appears as a sequence 
	public static int CountAppears(Node<Integer>h, int num) {
	      int count = 0;
	        boolean flag = false;
	        Node<Integer> temp = h;
	        if (h == null) {
	            return 0;
	        }
	        while (temp != null) {

	            if (temp.getValue() == num) {
	                if (!flag) {
	                    count++;
	                    flag = true;
	                }
	            } else {
	                flag = false;
	            }
	            temp = temp.getNext();
	        }

	        return count;
	    }
	// the number of iterates in this function is n if the numbers of nodes is n
	/// then the complexity is O(N)

	   
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node<Integer> h = null;
		h= new Node<Integer>(3,h);
		h= new Node<Integer>(1,h);
		h= new Node<Integer>(2,h);
		h= new Node<Integer>(2,h);
		h= new Node<Integer>(3,h);
		h= new Node<Integer>(2,h);
		printList(h);
		System.out.println(CountAppears(h, 2));
	}

}
