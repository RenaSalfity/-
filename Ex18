import java.util.Stack;

/*
רינה סלפיתי 209143098
קאסם חליליה 207674227
 */
public class Ex18 {
	// Function to insert an element into a sorted stack
	// in: sorted stack of integers and num
	// out: new stack with num in it
	public static Stack<Integer> insertIntoSortedStack(Stack<Integer> st, int num) {
		Stack<Integer> tempSt = new Stack<>();
		int current;
		boolean flag = false;

		while (!st.isEmpty() && !flag) {
			current = st.pop();
			if (st.isEmpty()) {
				tempSt.push(current);
				tempSt.push(num);
			} else if (current > num) {
				tempSt.push(num);
				tempSt.push(current);
				flag = true;
			} else {
				tempSt.push(current);
			}
		}

		// returning the nums to original stack
		while (!tempSt.isEmpty()) {
			st.push(tempSt.pop());
		}

		return st;
	}

	public static void main(String[] args) {
		Stack<Integer> st = new Stack<>();
		st.push(5);
		st.push(4);
		st.push(2);
		st.push(1);

		System.out.println("Stack before insertion: " + st);
		        insertIntoSortedStack(st, 3);
		System.out.println("Stack after inserting 3: " + st);

		        insertIntoSortedStack(st, 0);
		System.out.println("Stack after inserting 0: " + st);

		insertIntoSortedStack(st, 6);
		System.out.println("Stack after inserting 6: " + st);
	}
}
// O(n): The number of iterations depends on the position where the number needs
// to be inserted.
// but the maximum iterates is the num of elements in stack
